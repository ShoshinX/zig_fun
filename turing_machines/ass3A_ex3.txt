; This is a simple stack language interpreter.
; It evaluates Boolean expressions entered in reverse Polish notation.
; Input: a Boolean expression in reverse Polish.
; Use 1,0,&,|,~ for true, false, and, or not, respectively, without spaces.
; Example inputs:
;   11&    - returns 1  (= 1 and 1)
;   01~1|& - returns 0    (= (not 1 or 1) and 0)

0 * * r 0
0 _ _ l 01
; Find next command
01 * * * 1
1 x x l 1
1 0 x r 100  ; found 0
1 1 x r 110  ; found 1
1 & x r 120  ; found &
1 + x r 130  ; found |
1 ! x r 140  ; found ~
1 _ _ r 2    ; reached end-of-input
2 x _ r 2
2 _ _ r halt ; finished

; push a 0 onto the stack
100 x x r 100
100 _ _ r 101
101 _ 0 l 102
101 * * r 101
102 _ _ l 0
102 * * l 102

; push a 1 onto the stack
110 x x r 110
110 _ _ r 111
111 _ 1 l 112
111 * * r 111
112 _ _ l 0
112 * * l 112

; calculate &
120 x x r 120
120 _ _ r 121
121 _ _ l 122
121 * * r 121
122 0 _ l 123 ; pop 0 - first argument
122 1 _ l 124 ; pop 1 - first argument
122 _ ! * halt ; error - reached bottom of stack
123 0 0 l 127 ; pop 0, push 0
123 1 0 l 127 ; pop 1, push 0
124 0 0 l 127 ; pop 0, push 0
124 1 1 l 127 ; pop 1, push 1
124 * ! * halt ; error - reached bottom of stack
127 _ _ l 0
127 * * l 127

; calculate |
130 x x r 130
130 _ _ r 131
131 _ _ l 132
131 * * r 131
132 0 _ l 133 ; pop 0 - first element
132 1 _ l 134 ; pop 1 - first element
132 _ ! * halt ; error - reached bottom of stack
133 0 0 l 137 ; pop 0, push 0
133 1 1 l 137 ; pop 1, push 1
133 _ ! * halt ; error - reached bottom of stack
134 0 1 l 137 ; pop 0, push 1
134 1 1 l 137 ; pop 1, push 1
134 _ ! * halt ; error - reached bottom of stack
137 _ _ l 0
137 * * l 137

; calculate ~
140 x x r 140
140 _ _ r 141
141 _ _ l 142
141 * * r 141
142 0 1 l 147 ; pop 0, push 1
142 1 0 l 147 ; pop 1, push 0
142 _ ! * halt ; error - reached bottom of stack
147 _ _ l 0
147 * * l 147

; Exercise: extend this to support other binary operators, eg XOR, NAND

